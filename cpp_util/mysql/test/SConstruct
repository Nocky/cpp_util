#--- python mode ---

import os
import sys
import platform

env = Environment()

include_path = ['..', '../..']
lib_path = ['../../../build']
libs = ['cpp_util', 'gtest', 'gtest_main']

# platform for mac
if platform.system() == 'Darwin':
    include_path += [
        '/usr/local/include/mysql',
        '../../../gtest/gtest_64'
    ]
    env.Replace(CXX='/usr/local/bin/g++-4.8')
else:
    include_path += ['../../../gtest/gtest_32']

# use gtest lib_32 or lib_64
if platform.architecture()[0] == '64bit':
    lib_path += ['../../../gtest/gtest_64/lib']
else:
    lib_path += ['../../../gtest/gtest_32/lib']

# set environment variables
env.Append(CPPPATH=Dir(include_path))
env.Append(LIBPATH=Dir(lib_path))
env.Append(LIBS=Dir(libs))
env.Append(CXXFLAGS='-Wall -g -O2 -fPIC -fpic -DLOGGER_LEVEL=LL_INFO -pthread')

# add option
AddOption('--check', help='unit check case')
check = GetOption('check')

# build
env.Program('bin/mysqlClientTest', ['mysqlClientTest.cpp'])

# run unit test
if check is not None:
    ld_library_path_name = 'LD_LIBRARY_PATH'
    if platform.system() == 'Darwin':
        ld_library_path_name = 'DYLD_LIBRARY_PATH'
    os.system('%s=$%s:./bin:.:../../../build bin/mysqlClientTest' % (ld_library_path_name, ld_library_path_name))
